image: golang:1.23-alpine

stages:
  - build
  - deploy

variables:
  DOCKER_IMAGE_PREFIX: nagagogulan/aimx
  SERVICES: "identity forms roles dataset profile user_management"
  GITHUB_USERNAME: "Nagagogulan2"
  GITHUB_TOKEN: "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"

build:
  stage: build
  tags:
    - docker
  before_script:
    - apk update && apk add git docker
    - export DOCKER_HOST="unix:///var/run/docker.sock"
    # Configure GitHub authentication for Go
    - git config --global url."https://$GITHUB_USERNAME:$GITHUB_TOKEN@github.com/".insteadOf "https://github.com/"
  script:
    - |
      for SERVICE in $SERVICES; do
        echo "Building $SERVICE..."
        cd applications/$SERVICE || exit 1
        
        # Run go mod tidy and go mod vendor
        echo "Running go mod tidy and go mod vendor for $SERVICE..."
        go mod tidy
        go mod vendor
        
        # Build Docker image
        docker build -t $DOCKER_IMAGE_PREFIX-$SERVICE:latest .
        docker push $DOCKER_IMAGE_PREFIX-$SERVICE:latest
        
        cd - > /dev/null
      done

deploy_microservices:
  stage: deploy
  image: alpine:latest
  only:
    - dev
  before_script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
  script:
    - |
      ssh $EC2_USER@$EC2_HOST "
        echo 'Logging into Docker...'
        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

        for SERVICE in $SERVICES; do
          echo \"Pulling \$SERVICE image...\"
          docker pull $DOCKER_IMAGE_PREFIX-\$SERVICE:latest

          echo \"Stopping and removing existing container for \$SERVICE...\"
          docker ps -q --filter name=\$SERVICE | xargs -r docker stop
          docker ps -aq --filter name=\$SERVICE | xargs -r docker rm

          echo \"Starting new container for \$SERVICE...\"
          case \$SERVICE in
            identity)
              docker run -d --name identity -p 8081:8081 $DOCKER_IMAGE_PREFIX-identity:latest
              ;;
            forms)
              docker run -d --name forms -p 8082:8082 $DOCKER_IMAGE_PREFIX-forms:latest
              ;;
            roles)
              docker run -d --name roles -p 8083:8083 $DOCKER_IMAGE_PREFIX-roles:latest
              ;;
            dataset)
              docker run -d --name dataset -p 8084:8084 $DOCKER_IMAGE_PREFIX-dataset:latest
              ;;
            profile)
              docker run -d --name profile -p 8085:8085 $DOCKER_IMAGE_PREFIX-profile:latest
              ;;
            user_management)
              docker run -d --name user_management -p 8086:8086 $DOCKER_IMAGE_PREFIX-user_management:latest
              ;;
          esac
        done
      "
  only:
    - dev

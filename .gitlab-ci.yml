image: golang:1.23

stages:
  - clone
  - build
  - deploy

variables:
  DOCKER_IMAGE_PREFIX: nagagogulan/aimx
  GIT_REPO_URL: "https://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@github.com/PecozQ/aimx-library.git"
  GIT_BRANCH: "dev"
  SERVICES: "identity forms roles dataset profile user_management"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375

clone:
  image: alpine:latest
  stage: clone
  script:
    - apk update && apk add git
    - echo "Cloning repository..."
    - git clone -b "$GIT_BRANCH" "$GIT_REPO_URL" source

build-identity:
  image: docker:20.10.16  # Use Docker CLI image
  stage: build
  services:
    - docker:20.10.16-dind  # Docker-in-Docker service

  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""  # Disable TLS to avoid conflicts
    GOPRIVATE: github.com/PecozQ/*

  before_script:
    - apk add --no-cache git go  # Install Git & Go
    - git config --global url."https://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@github.com/".insteadOf "https://github.com/"
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

  script:
    - cd source/applications/identity  # adjust path if needed
    - go mod tidy
    - go mod vendor
    - echo "Building Docker image for identity service"
    - docker build -t $DOCKER_IMAGE_PREFIX-identity:latest .
    - echo "Pushing Docker image"
    - docker push $DOCKER_IMAGE_PREFIX-identity:latest

  tags:
    - Docker-Go


deploy_microservices:
  stage: deploy
  image: alpine:latest
  only:
    - dev
  before_script:
    - apk add --no-cache openssh bash
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
  script:
    - |
      bash -c '
      ssh $EC2_USER@$EC2_HOST "
        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        for SERVICE in $SERVICES; do
          echo \"Deploying \$SERVICE...\"
          docker pull $DOCKER_IMAGE_PREFIX-\$SERVICE:latest
          docker ps -q --filter name=\$SERVICE | xargs -r docker stop || true
          docker ps -aq --filter name=\$SERVICE | xargs -r docker rm || true
          case \$SERVICE in
            identity) docker run -d --name identity -p 8081:8081 $DOCKER_IMAGE_PREFIX-identity:latest ;;
            forms) docker run -d --name forms -p 8082:8082 $DOCKER_IMAGE_PREFIX-forms:latest ;;
            roles) docker run -d --name roles -p 8083:8083 $DOCKER_IMAGE_PREFIX-roles:latest ;;
            dataset) docker run -d --name dataset -p 8084:8084 $DOCKER_IMAGE_PREFIX-dataset:latest ;;
            profile) docker run -d --name profile -p 8085:8085 $DOCKER_IMAGE_PREFIX-profile:latest ;;
            user_management) docker run -d --name user_management -p 8086:8086 $DOCKER_IMAGE_PREFIX-user_management:latest ;;
          esac
        done
      "
      '

image: golang:1.23

stages:
  - clone
  - build
  - push
  - deploy

variables:
  DOCKER_IMAGE_PREFIX: nagagogulan/aimx
  GIT_REPO_URL: "https://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@github.com/PecozQ/aimx-library.git"
  GIT_BRANCH: "dev"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: unix:///var/run/docker.sock

clone:
  image: alpine:latest
  stage: clone
  script:
    - apk update && apk add git
    - echo "Cloning repository..."
    - git clone -b "$GIT_BRANCH" "$GIT_REPO_URL" source

build-all-services:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: unix:///var/run/docker.sock
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - apk add --no-cache git
    - git config --global url."https://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@github.com/".insteadOf "https://github.com/"
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - git clone -b "$GIT_BRANCH" "$GIT_REPO_URL" source  # âœ… Add this line
   
  script: |-
    cd source/applications
    for d in */; do
      echo "Processing $d"
      cd "$d"
      if [ -f go.mod ]; then
        go mod tidy
        go mod vendor
      else
        echo "No go.mod in $d, skipping..."
      fi
      cd ..
    done
    docker-compose -f docker-compose-ext.yml up -d --build

push-images:
  stage: push
  image: golang:1.23
  services:
    - docker:dind

  before_script:
    - apk add --no-cache git docker
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - git config --global url."https://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@github.com/".insteadOf "https://github.com/"
  script:
    - cd source
    - go mod tidy
    - go mod vendor
    - |
      for service in identity forms roles dataset profile user_management request_management system external-kafka; do
        IMAGE_NAME="backend_ext-$service"
        TAGGED_NAME="$DOCKER_IMAGE_PREFIX-ext-$service:latest"
        docker tag $IMAGE_NAME:latest $TAGGED_NAME
        docker push $TAGGED_NAME
      done

deploy-to-ec2:
  stage: deploy
  image: alpine:latest
  only:
    - main
  before_script:
    - apk add --no-cache openssh
  script:
    - echo "$SSH_PRIVATE_KEY" > key.pem
    - chmod 600 key.pem
    - ssh -o StrictHostKeyChecking=no -i key.pem $EC2_USER@$EC2_HOST "docker-compose -f docker-compose-ext-server.yml up -d --build"

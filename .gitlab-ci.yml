image: golang:1.23-alpine

stages:
  - build
  - deploy

variables:
  DOCKER_IMAGE_PREFIX: nagagogulan/aimx
  SERVICES: "identity forms roles dataset profile user_management"

build:
  stage: build
  tags:
    - docker
  before_script:
    - apk add --no-cache docker-cli
    - export DOCKER_HOST="unix:///var/run/docker.sock"
  script: |
    echo "SERVICES: $SERVICES"
    # Convert the services into a list (one per line)
    export SERVICES=$(echo $SERVICES | tr -s ' ' '\n')

    # List available services in the applications directory
    AVAILABLE_SERVICES=$(ls -1 applications)
    echo "Available services: $AVAILABLE_SERVICES"

    for SERVICE in $SERVICES; do
      if echo "$AVAILABLE_SERVICES" | grep -q "^$SERVICE$"; then
        echo "Building and deploying service: $SERVICE"
        SERVICE_PATH="applications/$SERVICE"
        cd "$SERVICE_PATH"
        docker build -t "$DOCKER_IMAGE_PREFIX-$SERVICE:latest" .
        docker push "$DOCKER_IMAGE_PREFIX-$SERVICE:latest"
        cd - > /dev/null
      else
        echo "$SERVICE does not exist in the applications directory. Skipping..."
      fi
    done

deploy_microservices:
  stage: deploy
  image: alpine:latest
  only:
    - dev
  before_script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
  script: |
    ssh $EC2_USER@$EC2_HOST "
      echo 'Logging into Docker...'
      docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      AVAILABLE_SERVICES=$(ls -1 applications)
      for SERVICE in $SERVICES; do
        if echo \"\$AVAILABLE_SERVICES\" | grep -q \"^\$SERVICE\$\"; then
          echo \"Pulling \$SERVICE image...\"
          docker pull $DOCKER_IMAGE_PREFIX-\$SERVICE:latest
          echo \"Stopping and removing existing container for \$SERVICE...\"
          docker ps -q --filter name=\$SERVICE | xargs -r docker stop
          docker ps -aq --filter name=\$SERVICE | xargs -r docker rm
          echo \"Starting new container for \$SERVICE...\"
          docker run -d --name \$SERVICE -p 8080-8086:8080-8086 $DOCKER_IMAGE_PREFIX-\$SERVICE:latest
        else
          echo \"\$SERVICE does not exist in the applications directory. Skipping...\"
        fi
      done
    "

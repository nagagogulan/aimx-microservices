image: golang:1.20-alpine

stages:
  - clone
  - build
  - deploy

variables:
  DOCKER_IMAGE_PREFIX: nagagogulan/aimx
  SERVICES: "identity forms roles dataset profile user_management"
  GIT_REPO_URL: "https://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@github.com/PecozQ/aimx-library.git"
  GIT_BRANCH: "dev"
  PROJECT_REPO_URL: "https://github.com/PecozQ/your-application-repo.git"  # Add your project repo URL here
  DOCKER_HOST: tcp://docker:2375  # Configure Docker to talk to dind service

clone:
  stage: clone
  script:
    - apk update && apk add git
    - git clone -b "$GIT_BRANCH" "$PROJECT_REPO_URL" applications  # Clone the main application repo
    - cd applications 

build:
  image: docker:latest
  stage: build
  services:
    - name: docker:dind
      alias: docker
  variables:
    DOCKER_TLS_CERTDIR: ""  # Disable Docker TLS as it's not necessary here
  before_script:
    - apk update && apk add git go
    - git config --global url."https://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@github.com/".insteadOf "https://github.com/"
    - go env -w GOPRIVATE=github.com/PecozQ/aimx-library
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
  script:
    - |
      echo "Listing the contents of applications directory..."
      ls -la applications  # List the contents to verify the service directories

      for SERVICE in $SERVICES; do
        echo "Building and tagging Docker image for $SERVICE..."
        # Ensure the service directory exists before moving to it
        if [ -d "applications/$SERVICE" ]; then
          cd applications/$SERVICE
        else
          echo "Directory for service '$SERVICE' not found!"
          exit 1
        fi

        go mod tidy
        go mod vendor
        docker build -t backend_$SERVICE:latest .
        docker tag backend_$SERVICE:latest $DOCKER_IMAGE_PREFIX-$SERVICE:latest
        docker push $DOCKER_IMAGE_PREFIX-$SERVICE:latest
        cd ../../
      done
    - echo "Build, tag, and push completed for all services."

deploy_microservices:
  stage: deploy
  image: alpine:latest
  only:
    - dev
  before_script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
  script:
    - |
      ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "
        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

        for SERVICE in $SERVICES; do
          echo \"Deploying \$SERVICE...\"
          docker pull $DOCKER_IMAGE_PREFIX-\$SERVICE:latest

          docker ps -q --filter name=\$SERVICE | xargs -r docker stop
          docker ps -aq --filter name=\$SERVICE | xargs -r docker rm

          case \$SERVICE in
            identity) docker run -d --name identity -p 8081:8081 $DOCKER_IMAGE_PREFIX-identity:latest ;;
            forms) docker run -d --name forms -p 8082:8082 $DOCKER_IMAGE_PREFIX-forms:latest ;;
            roles) docker run -d --name roles -p 8083:8083 $DOCKER_IMAGE_PREFIX-roles:latest ;;
            dataset) docker run -d --name dataset -p 8084:8084 $DOCKER_IMAGE_PREFIX-dataset:latest ;;
            profile) docker run -d --name profile -p 8085:8085 $DOCKER_IMAGE_PREFIX-profile:latest ;;
            user_management) docker run -d --name user_management -p 8086:8086 $DOCKER_IMAGE_PREFIX-user_management:latest ;;
          esac
        done
      "

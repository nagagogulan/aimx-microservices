image: golang:1.23-alpine

stages:
  - build
  - deploy

variables:
  DOCKER_IMAGE_PREFIX: nagagogulan/aimx
  SERVICES: "identity forms roles dataset profile user_management"

build:
  stage: build
  tags:
    - docker
  before_script:
    - apk add --no-cache docker-cli
    - export DOCKER_HOST="unix:///var/run/docker.sock"
  
  script:
  - echo "SERVICES: $SERVICES"  # Debugging line
  - SERVICES=$(echo $SERVICES | tr -s ' ' '\n')  # Remove any extra spaces/newlines
  - for SERVICE in $SERVICES; do
      echo "Processing service: $SERVICE"  # Debugging line
      SERVICE_PATH="applications/$SERVICE"
      echo "Service path: $SERVICE_PATH"  # Debugging line
      if [ -d "$SERVICE_PATH" ]; then
        echo "Listing contents of $SERVICE_PATH directory:"
        ls -l $SERVICE_PATH || exit 1  # Ensure the service directory exists
        cd $SERVICE_PATH || exit 1  # Change into the service directory
        docker build -t $DOCKER_IMAGE_PREFIX-$SERVICE:latest .
        docker push $DOCKER_IMAGE_PREFIX-$SERVICE:latest
        cd - > /dev/null  # Return to previous directory silently
      else
        echo "$SERVICE_PATH directory does not exist!"  # Handle the missing directory
        exit 1
      fi
    done



deploy_microservices:
  stage: deploy
  image: alpine:latest
  only:
    - dev
  before_script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
  script:
    - |
      ssh $EC2_USER@$EC2_HOST "
        echo 'Logging into Docker...'
        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

        for SERVICE in $SERVICES; do
          echo \"Pulling \$SERVICE image...\"
          docker pull $DOCKER_IMAGE_PREFIX-\$SERVICE:latest

          echo \"Stopping and removing existing container for \$SERVICE...\"
          docker ps -q --filter name=\$SERVICE | xargs -r docker stop
          docker ps -aq --filter name=\$SERVICE | xargs -r docker rm

          echo \"Starting new container for \$SERVICE...\"
          case \$SERVICE in
            identity)
              docker run -d --name identity -p 8081:8081 $DOCKER_IMAGE_PREFIX-identity:latest
              ;;
            forms)
              docker run -d --name forms -p 8082:8082 $DOCKER_IMAGE_PREFIX-forms:latest
              ;;
            roles)
              docker run -d --name roles -p 8083:8083 $DOCKER_IMAGE_PREFIX-roles:latest
              ;;
            dataset)
              docker run -d --name dataset -p 8084:8084 $DOCKER_IMAGE_PREFIX-dataset:latest
              ;;
            profile)
              docker run -d --name profile -p 8085:8085 $DOCKER_IMAGE_PREFIX-profile:latest
              ;;
            user_management)
              docker run -d --name user_management -p 8086:8086 $DOCKER_IMAGE_PREFIX-user_management:latest
              ;;
          esac
        done
      "

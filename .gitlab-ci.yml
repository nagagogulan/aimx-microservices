stages:
  - build

variables:
  DOCKER_IMAGE_PREFIX: nagagogulan/aimx
  DOCKER_HOST: tcp://docker:2375  # Docker-in-Docker mode
  DOCKER_TLS_CERTDIR: ""  # Disable TLS to work with docker:dind

services:
  - docker:dind  # Docker daemon for Docker-in-Docker mode

build_backend:
  stage: build
  image: docker:latest  # Use Docker image, which already has Docker CLI
  tags:
    - docker  # Make sure your runner is tagged with 'docker' for this to work
  before_script:
    - apk add --no-cache bash  # Only needed if your script uses bash (default shell)
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  script:
    - for SERVICE in identity forms roles dataset profile user_management; do
        echo "Building $SERVICE...";
        cd applications/$SERVICE;
        docker build -t $DOCKER_IMAGE_PREFIX-$SERVICE:latest .;
        docker push $DOCKER_IMAGE_PREFIX-$SERVICE:latest;
        cd - > /dev/null;
      done
  only:
    - dev  # This job will only run on the 'dev' branch




# stages:
#   - build
#   - deploy

# variables:
#   DOCKER_IMAGE_PREFIX: nagagogulan/aimx
#   SERVICES: "identity forms roles dataset profile user_management"

# build_microservices:
#   stage: build
#   image: docker:20.10.16
#   services:
#     - docker:20.10.16-dind
#   variables:
#     DOCKER_TLS_CERTDIR: ""
#   before_script:
#     - apk add --no-cache git make
#     - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
#   script:
#     - |
#       for SERVICE in $SERVICES; do
#         echo "Building $SERVICE..."
#         cd applications/$SERVICE || exit 1
#         docker build -t $DOCKER_IMAGE_PREFIX-$SERVICE:latest .
#         docker push $DOCKER_IMAGE_PREFIX-$SERVICE:latest
#         cd - > /dev/null
#       done

# deploy_microservices:
#   stage: deploy
#   image: alpine:latest
#   only:
#     - dev
#   before_script:
#     - apk add --no-cache openssh
#     - mkdir -p ~/.ssh
#     - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
#     - chmod 600 ~/.ssh/id_rsa
#     - echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
#   script:
#     - |
#       ssh $EC2_USER@$EC2_HOST "
#         echo 'Logging into Docker...'
#         docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

#         for SERVICE in $SERVICES; do
#           echo \"Pulling \$SERVICE image...\"
#           docker pull $DOCKER_IMAGE_PREFIX-\$SERVICE:latest

#           echo \"Stopping and removing existing container for \$SERVICE...\"
#           docker ps -q --filter name=\$SERVICE | xargs -r docker stop
#           docker ps -aq --filter name=\$SERVICE | xargs -r docker rm

#           echo \"Starting new container for \$SERVICE...\"
#           case \$SERVICE in
#             identity)
#               docker run -d --name identity -p 8081:8081 $DOCKER_IMAGE_PREFIX-identity:latest
#               ;;
#             forms)
#               docker run -d --name forms -p 8082:8082 $DOCKER_IMAGE_PREFIX-forms:latest
#               ;;
#             roles)
#               docker run -d --name roles -p 8083:8083 $DOCKER_IMAGE_PREFIX-roles:latest
#               ;;
#             dataset)
#               docker run -d --name dataset -p 8084:8084 $DOCKER_IMAGE_PREFIX-dataset:latest
#               ;;
#             profile)
#               docker run -d --name profile -p 8085:8085 $DOCKER_IMAGE_PREFIX-profile:latest
#               ;;
#             user_management)
#               docker run -d --name user_management -p 8086:8086 $DOCKER_IMAGE_PREFIX-user_management:latest
#               ;;
#           esac
#         done
#       "
